Basic Counter with Handler Function

JavaScript
import React, { useState } from 'react';

const App = () => {
  const [count, setCount] = useState(0);

  const ValueUpdater = () => {
    setCount(count + 1);
  };

  return (
    <div>
      <h3>React</h3>
      <p>{count}</p>
      <button onClick={ValueUpdater}>Increment</button>
    </div>
  );
};
Multiple State Variables

JavaScript
import React, { useState } from 'react';

const App = () => {
  const [count, setCount] = useState(0);
  const [negative, setNegative] = useState(0);

  const ValueUpdater1 = () => {
    setNegative(negative - 1);
  };

  return (
    <div>
      <h3>React</h3>
      <p>{count} --- {negative}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
      <button onClick={ValueUpdater1}>Negative</button>
    </div>
  );
};
Controlled Form Inputs

JavaScript
import { useState } from 'react';

const App = () => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');

  return (
    <form onSubmit={() => alert('Form submitted')}>
      <input
        placeholder='Name'
        type="text"
        name="name"
        value={name}
        onBlur={() => console.log('Input field lost focus')}
        onChange={(e) => setName(e.target.value)}
        required
      />
      <input
        placeholder='Email'
        type="email"
        name="email"
        value={email}
        onBlur={() => console.log('Input field lost focus')}
        onChange={(e) => setEmail(e.target.value)}
        required
      />
      <input type="submit" value="Submit" />
      <h1>{name}</h1>
      <h1>{email}</h1>
    </form>
  );
};

export default App;
useEffect - Running on Specific State Change

JavaScript
import React, { useEffect, useState } from 'react';

const App = () => {
  const [count, setCount] = useState(0);
  const [c100, setC100] = useState(100);

  useEffect(() => {
    console.log(`Count has changed to: ${count}`);
    console.log(`Above 100 Count has changed to: ${c100}`);
  }, [count]);

  return (
    <div>
      <h1>Count: {count}</h1>
      <button onClick={() => setCount(count + 1)}>Increment</button>
      <h1>Above 100: {c100}</h1>
      <button onClick={() => setC100(c100 + 1)}>Increment</button>
    </div>
  );
};
useEffect - Running Once on Mount

JavaScript
import React, { useEffect, useState } from 'react';

const App = () => {
  const [count, setCount] = useState(0);
  const [c100, setC100] = useState(100);

  // This effect runs whenever 'count' changes
  useEffect(() => {
    console.log(`Count has changed to: ${count}`);
  }, [count]);

  // This effect runs only once on component mount
  useEffect(() => {
    console.log('Component mounted!');
  }, []);

  return (
    <div>
      <h1>Count: {count}</h1>
      <button onClick={() => setCount(count + 1)}>Increment</button>
      <h1>Above 100: {c100}</h1>
      <button onClick={() => setC100(c100 + 1)}>Increment</button>
    </div>
  );
};
useEffect - Cleanup with setInterval

JavaScript
import React, { useEffect, useState } from 'react';

const Login = () => {
  const [timer, setTimer] = useState(0);

  useEffect(() => {
    const interval = setInterval(() => {
      console.log('Interval running');
      setTimer((prevTimer) => prevTimer + 1);
    }, 1000);

    // Cleanup function
    return () => {
      clearInterval(interval);
      console.log('Interval cleared');
    };
  }, []); // Empty array ensures this runs only on mount and unmount

  return (
    <div>
      <h1>Timer: {timer}</h1>
    </div>
  );
};
Component Composition - Passing Basic Props

JavaScript
// App.jsx (Parent)
import Login from './Pages/Login';

const App = () => {
  return (
    <div>
      <Login Log="1234" />
    </div>
  );
};

// Login.jsx (Child)
import React from 'react';

const Login = (props) => {
  // const {Log} = props; // Destructuring props
  return (
    <div>
      <h3>Login page</h3>
      <p>props value : {props.Log}</p>
    </div>
  );
};

export default Login;
Component Composition - Using props.children

JavaScript
// App.jsx (Parent)
import Login from './Pages/Login';

const App = () => {
  return (
    <div>
      <Login>
        <h2>Login component 1</h2>
        <h2>Login component 2</h2>
        <h2>Login component 3</h2>
      </Login>
    </div>
  );
};

export default App;


// Login.jsx (Child)
import React from 'react';

const Login = (props) => {
  return (
    <div>
      <h3>Login page</h3>
      <h1>{props.children}</h1>
    </div>
  );
};

export default Login;
List Rendering with .map() & Conditional Rendering with &&

JavaScript
import { useState } from 'react';

// map and conditional rendering
const App = () => {
  const [arr, setArr] = useState([1, 2, 3, 4, 5]);

  return (
    <div>
      {arr.map((value, index) => (
        <p key={index}>{value}</p>
      ))}
      <button onClick={() => setArr([...arr, 6])}>Add</button>
      {true && <h1>Hello</h1>}
    </div>
  );
};
Conditional Rendering with a Ternary Operator

JavaScript
import React, { useState } from 'react';

const App = () => {
  const [count, setCount] = useState(0);
  const [visible, setVisible] = useState(false);

  return (
    <div>
      <h3>React</h3>
      <p>{count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
      <button onClick={() => setVisible(!visible)}>Show</button>
      {visible ? <h3>Hello Students</h3> : <h3>Nothing</h3>}
    </div>
  );
};

export default App;
